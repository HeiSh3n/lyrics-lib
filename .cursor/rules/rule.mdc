---
description: 
globs: 
alwaysApply: true
---
---
description: This rule provides best practices and coding standards for developing a Node.js module named `lyrics-lib`. It covers code organization, performance, security, testing, and common pitfalls to ensure robust and maintainable development of a lyrics processing library.
globs: *.js,*.ts,*.jsx,*.tsx,*.py,*.cs
---
## ðŸš« Prohibited Patterns

-   **Ignore .cursor Folder Entirely:**
    -   The `.cursor` folder and **everything inside it must be entirely ignored** in all GitHub MCP commits.
    -   Do **not** stage, commit, track, or reference `.cursor/` in any way.
    -   Commit messages and summaries must **never mention `.cursor`**, directly or indirectly.
    -   If your tool auto-generates commit content, ensure it filters out `.cursor` changes and related noise.

## 1. Code Organization and Structure

-   **Directory Structure:**
    -   `src/`: Contains the main source code of your `lyrics-lib` module.
        -   `core/`: Core processing functions for parsing and matching lyrics.
        -   `adapters/`: Optional integrations with APIs or file types (e.g., LRC, JSON, Genius API).
        -   `utils/`: Utility functions and helpers.
        -   `config/`: Configuration and constants.
    -   `tests/`: Unit and integration tests.
    -   `docs/`: Technical documentation.
    -   `scripts/`: Automation or setup scripts (e.g., publishing, formatting).
-   **File Naming Conventions:**
    -   Use lowercase with dashes or camelCase depending on convention.
    -   Keep filenames descriptive and consistent with their function.
-   **Module Organization:**
    -   Use ES Modules (`import/export`) in all JavaScript/TypeScript files.
    -   Avoid circular imports.
-   **Library Design:**
    -   Provide a clean public API via an `index.ts` or `main.ts`.
    -   Expose only the necessary entry points and keep internal logic encapsulated.

## 2. Common Patterns and Anti-patterns

-   **Design Patterns:**
    -   Functional programming over class-based where appropriate.
    -   Strategy pattern for switching between lyrics providers or formats.
    -   Adapter pattern for external API wrappers.
-   **Recommended Approaches:**
    -   Provide good default behavior but allow extensibility.
    -   Write composable functions with clear inputs and outputs.
    -   Document edge cases and assumptions.
-   **Anti-patterns:**
    -   Avoid using global state.
    -   Do not hardcode config values (use `.env` or `config.ts`).
    -   Avoid nested callbacks â€” prefer async/await.
    -   Always handle and log errors meaningfully.

## 3. Performance Considerations

-   Use fast, memory-efficient data structures.
-   Minimize external API calls and cache responses where possible.
-   Avoid blocking synchronous operations in hot paths.
-   Use lazy loading for optional adapters or features.

## 4. Security Best Practices

-   Never include secrets or tokens in source code.
-   Validate all external inputs, especially from user-generated lyrics or APIs.
-   Use secure network protocols and sanitize outputs if rendering to UI.

## 5. Testing Approaches

-   Write unit tests for every module and utility.
-   Use integration tests to simulate real-world usage of `lyrics-lib`.
-   Mock external API calls (e.g., Genius, Musixmatch).
-   Use code coverage tools to ensure robustness.

## 6. Common Pitfalls and Gotchas

-   Failing to support special character sets (e.g., accented characters, Chinese lyrics).
-   Misaligned timestamp parsing for lyric files (e.g., LRC).
-   Inconsistent handling of multi-language or vertical alignment.
-   Version mismatches with Node.js or third-party modules.

## 7. Tooling and Environment

-   **IDE:** Visual Studio Code with ESLint + Prettier extensions.
-   **Build Tool:** Use Vite or Rollup for bundling if needed.
-   **Linting:** Enforce with ESLint + Prettier.
-   **Testing:** Use Vitest, Jest, or Mocha with coverage reporting.
-   **CI/CD:** GitHub Actions or similar to run tests and linting on push.
-   **Publishing:** Configure `package.json` and `.npmrc` for scoped publishing.

